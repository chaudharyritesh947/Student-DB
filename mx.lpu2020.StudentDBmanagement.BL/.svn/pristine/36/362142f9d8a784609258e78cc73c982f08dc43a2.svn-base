using mx.lpu2020.StudentDBmanagement.DL;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace mx.lpu2020.StudentDBmanagement.BL
{
    public class StudentRepositery
    {
        DatabaseManager databaseManager;
        public StudentRepositery()
        {
            databaseManager = new DatabaseManager();
        }

        public DataTable Retrive()
        {
           
                
                DataTable dataTable = databaseManager.RetrieveData("Select * from student");                           
                return dataTable;
          
        }

        public bool Save(Student student)
        {
            string FirstName = student.FirstName;
            string LastName = student.LastName;
            string Email = student.Email;
            string City = student.City;
            string Gender = student.Gender;          
            string QueryString = string.Format("Insert into Student(firstName,lastName,email,city,gender) Values('{0}','{1}','{2}','{3}','{4}')", FirstName, LastName, Email, City, Gender);           
            int row_count = databaseManager.UpdateData(QueryString);
            if (row_count > 0)
            {
                return true;
            }
            return false;
        }

      

        public bool UserAuthentication(string username, string password)
        {
            if (databaseManager.Authenticate(username, password))
            {
                return true;
            }
            else
            {
                return false;
            }

        }

        public int ValidateLogin(string username, string password)
        {
            int IsValidate = 0;
            if (string.IsNullOrEmpty(username) || string.IsNullOrWhiteSpace(username))
            {
                IsValidate = 1;
            }
            else if (string.IsNullOrEmpty(password) || string.IsNullOrWhiteSpace(password))
            {
                IsValidate = 2;
            }
            return IsValidate;
        }


        public int ValidateAddRecord(string firstname, string lastname,string email, string city, string gender)
        {
            int IsValidate = 0;
            if (string.IsNullOrEmpty(firstname) || string.IsNullOrWhiteSpace(firstname))
            {
                IsValidate = 1;
            }
            else if (string.IsNullOrEmpty(lastname) || string.IsNullOrWhiteSpace(lastname))
            {
                IsValidate = 2;
            }
            else if (string.IsNullOrEmpty(email) || string.IsNullOrWhiteSpace(email))
            {
                IsValidate = 3;
            }
            else if (string.IsNullOrEmpty(city) || string.IsNullOrWhiteSpace(city))
            {
                IsValidate = 4;
            }
            else if (string.IsNullOrEmpty(gender) || string.IsNullOrWhiteSpace(gender))
            {
                IsValidate = 5;
            }
            return IsValidate;
        }

    }
}
